model Board {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String   @db.VarChar(255)
  author    User     @relation("BoardAuthor", fields: [authorId], references: [id])
  authorId  Int
  tasks     Task[]
  users     UserOnBoard[]
}

model UserOnBoard {
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  board  Board  @relation(fields: [boardId], references: [id])
  boardId Int

  @@id([userId, boardId])
}

model Task {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  title        String   @db.VarChar(255)
  desc         String?
  board        Board    @relation(fields: [boardId], references: [id])
  boardId      Int
  author       User     @relation("TaskAuthor", fields: [authorId], references: [id])
  authorId     Int
  assignedUsers UserOnTask[]
}

model UserOnTask {
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  task   Task   @relation(fields: [taskId], references: [id])
  taskId Int

  @@id([userId, taskId])
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  name           String?
  authoredBoards Board[]  @relation("BoardAuthor")
  boards         UserOnBoard[]
  authoredTasks  Task[]   @relation("TaskAuthor")
  assignedTasks  UserOnTask[]
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}