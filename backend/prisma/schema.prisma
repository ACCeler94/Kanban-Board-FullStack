model Board {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  title     String        @default("Untitled") @db.VarChar(255)
  author    User          @relation("BoardAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  tasks     Task[]
  users     UserOnBoard[]

  @@index([createdAt])
}

model UserOnBoard {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String

  @@id([userId, boardId])
}

enum TaskStatus {
  IN_PROGRESS @map("In Progress")
  DONE        @map("Done")
  TO_DO       @map("To Do")
}

model Subtask {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  desc      String   @db.VarChar(280)
  finished  Boolean

  @@index([createdAt])
}

model Task {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  title         String       @default("Untitled") @db.VarChar(100)
  desc          String?
  board         Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId       String
  author        User         @relation("TaskAuthor", fields: [authorId], references: [id])
  authorId      String
  assignedUsers UserOnTask[]
  status        TaskStatus   @default(TO_DO)
  subtasks      Subtask[]

  @@index([createdAt])
}

model UserOnTask {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@id([userId, taskId])
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  name           String
  auth0Sub       String        @unique
  authoredBoards Board[]       @relation("BoardAuthor")
  boards         UserOnBoard[]
  authoredTasks  Task[]        @relation("TaskAuthor")
  assignedTasks  UserOnTask[]
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
